#!/usr/bin/env powershell

################################################################################
# The John Operating System Project is the collection of software and configurations
# to generate IoT EcoSystem, like the John Operating System Platform one.
# Copyright (C) 2021 Roberto Pompermaier
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
################################################################################

###############################################################################
# Customization:
# $JOD_DIR/scripts/pre-startup.ps1
#
# This script is executed before JOD instance startup (via start.ps1
# script). It prepare current environment to run the JOD instance. For example
# it check that the current os is supported (All OSs), generates object's
# structure, starts HW Daemon as background process, checks gateways/servers
# reachability, checks installed commands, make HW scripts executables...
#
#
# Artifact: JOD Dist Template
# Version:  1.0.3
#
# Artifact: {JOD Dist Name}
# Version:  {JOD Dist Version}
###############################################################################

## Default init - START
$JOD_DIR=(get-item $PSScriptRoot ).Parent.FullName
.$JOD_DIR/scripts/libs/include.ps1 "$JOD_DIR"

#$DEBUG=$true
if (($null -ne $DEBUG) -and ($DEBUG)) { INSTALL-LogsDebug } else { INSTALL-Logs }
setupCallerAndScript $PSCommandPath $MyInvocation.PSCommandPath

."$JOD_DIR/scripts/jod/jod-script-configs.ps1"
execScriptConfigs "$JOD_DIR/scripts/jod/errors.ps1"

# Load jod_configs.sh, exit if fails
setupJODScriptConfigs "$JOD_DIR/configs/configs.ps1"
## Default init - END

logInf "PRE Startup script"

## Example check Supported OS - START
## Check supported OS
## De-comment only supported OS
##$supportedOS="Unix", "MacOS", "BSD", "Solaris", "Win32"        # All OSs
##$supportedOS="Unix", "MacOS", "BSD", "Solaris"                 # Only Unix base OS
##$supportedOS="Unix", "BSD", "Solaris"                          # Only Linux
##$supportedOS="MacOS"                                           # Only MacOS
##$supportedOS="Win32"                                           # Only Windows
#failOnUnsupportedOS $supportedOS
## Example check Supported OS - END



## Example generate JOD Object Structure - START
## Generate a John Object Structure for current {Represented Object}
#."$JOD_DIR/scripts/hw/generateObjectStructure.ps1"
## Example generate JOD Object Structure - END



## Example start the HW Daemon - START
## Start HW Daemon as background process
##$global:DEBUG=true # Not work
#Start-Process "powershell.exe" -ArgumentList "$JOD_DIR/scripts/hw/start_daemon.ps1" -WindowStyle Hidden -RedirectStandardOutput "$JOD_DIR/logs/daemon.log" -RedirectStandardError "$JOD_DIR/logs/daemon.err"
## Example start the HW Daemon - END



## Example various: Check server/gateway reachability - START
## Check gateway reachability
#$GW_NAME="Philips Hue Gateway at '$HUE_GW_ADDR' address"
#$GW_CONN="on the same local network of current machine"
#$GW_PARAMS="HUE_GW_NAME and HUE_GW_ADDR"
#if ($(Test-Connection -TargetName "$HUE_GW_ADDR")) {
#    logInf "$GW_NAME reachable"
#} else {
#    logWar "ERROR: $GW_NAME NOT reachable"
#    logFat "Please check that the gateway was connected successfully ($GW_CONN), or update distribution configs with correct $GW_PARAMS values" $ERR_MISSING_REQUIREMENTS
#}
## Example various: Check server/gateway reachability - END

## Example various: check Java installed - START                              # ToDo translate examples in powershell
## Check java
#if command -v java &>/dev/null; then
#  logInf "Java installed"
#else
#  echo "Missing Java, please install it"
#  logFat "Java not installed, exit" $ERR_MISSING_REQUIREMENTS
#fi
## Example various: check Java installed - END

## Example various: Make firmware's scripts executable - START                # ToDo translate examples in powershell
## Set sensors scripts executables
#find $JOD_DIR/scripts/hw/ -type f -exec chmod +x {} \;
## Example various: Make firmware's scripts executable - END
